name: "üöÄ Deploy to Vercel"

on:
  push:
    branches:
      - main
      - master
  pull_request:
    branches:
      - main
      - master
  workflow_dispatch:

jobs:
  build-and-deploy:
    runs-on: ubuntu-latest
    
    steps:
      - name: "üì• Checkout code"
        uses: actions/checkout@v4

      - name: "üõ†Ô∏è Setup bun"
        uses: oven-sh/setup-bun@v1
        with:
          bun-version: latest

      - name: "üß∞ Setup Node.js"
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: "üì¶ Install dependencies"
        run: |
          # Install dependencies with bun
          bun install --no-save
        env:
          PYTHON: python3

      - name: "üõ†Ô∏è Install Vercel CLI"
        run: bun add -g vercel@latest

      - name: "üßπ Check and delete existing matching Vercel projects"
        id: cleanup-projects
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          FARCASTER_BEARER_TOKEN: ${{ secrets.FARCASTER_BEARER_TOKEN }}
        run: |
          # Get repository name for pattern matching
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          REPO_PATTERN="${REPO_NAME}-"
          
          echo "========================================="
          echo "Cleaning up existing Vercel projects"
          echo "Pattern: ${REPO_PATTERN}*"
          echo "========================================="
          
          # List all Vercel projects
          PROJECTS=$(curl -s -X GET \
            "https://api.vercel.com/v9/projects" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract project names that match the pattern
          MATCHING_PROJECTS=$(echo "$PROJECTS" | jq -r ".projects[] | select(.name | startswith(\"${REPO_PATTERN}\")) | .name" || true)
          
          if [ -n "$MATCHING_PROJECTS" ]; then
            echo "Found matching Vercel projects to delete:"
            echo "$MATCHING_PROJECTS"
            echo ""
            
            # Delete each matching project with rate limiting
            while IFS= read -r PROJECT; do
              if [ -n "$PROJECT" ]; then
                echo "Deleting Vercel project: $PROJECT"
                DELETE_RESPONSE=$(curl -s -X DELETE \
                  "https://api.vercel.com/v9/projects/${PROJECT}" \
                  -H "Authorization: Bearer ${VERCEL_TOKEN}" \
                  -H "Content-Type: application/json")
                
                # Check if deletion was successful (Vercel API returns empty response on success)
                if [ -z "$DELETE_RESPONSE" ] || [ "$DELETE_RESPONSE" = "{}" ]; then
                  echo "‚úì Successfully deleted Vercel project: $PROJECT"
               
                else
                  echo "‚ö† Warning: Failed to delete Vercel project: $PROJECT"
                  echo "Response: $DELETE_RESPONSE"
                fi
                
                # Rate limiting - wait 1 second between deletions
                sleep 1
              fi
            done <<< "$MATCHING_PROJECTS"
          else
            echo "No existing Vercel projects found matching pattern: ${REPO_PATTERN}*"
          fi
          
          echo ""
          echo "========================================="
          echo "Cleanup complete"
          echo "========================================="

      - name: "üÜï Generate Vercel project name and create project"
        id: generate-vercel-project
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
        run: |
          # Get repository name
          REPO_NAME=$(echo "${{ github.repository }}" | cut -d'/' -f2)
          
          # Generate random alphanumeric string
          RANDOM_STRING=$(openssl rand -hex 8 | tr -d '\n')
          
          # Combine repository name with random string
          PROJECT_NAME="${REPO_NAME}-${RANDOM_STRING}"
          
          # Ensure minimum length of 26 characters
          while [ ${#PROJECT_NAME} -lt 26 ]; do
            EXTRA_CHARS=$(openssl rand -hex 2 | tr -d '\n')
            PROJECT_NAME="${PROJECT_NAME}${EXTRA_CHARS}"
          done
          
          # Ensure project name is valid (lowercase, alphanumeric, hyphens only)
          PROJECT_NAME=$(echo "$PROJECT_NAME" | tr '[:upper:]' '[:lower:]' | sed 's/[^a-z0-9-]/-/g')
          
          echo "Generated project name: $PROJECT_NAME"
          
          # Create new Vercel project
          CREATE_RESPONSE=$(curl -s -X POST \
            "https://api.vercel.com/v9/projects" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json" \
            -d "{
              \"name\": \"$PROJECT_NAME\",
              \"framework\": \"nextjs\"
            }")
          
          PROJECT_ID=$(echo "$CREATE_RESPONSE" | jq -r '.id')
          
          if [ "$PROJECT_ID" != "null" ] && [ -n "$PROJECT_ID" ]; then
            echo "‚úì Successfully created Vercel project: $PROJECT_NAME"
            echo "Project ID: $PROJECT_ID"
            echo "project_name=$PROJECT_NAME" >> $GITHUB_OUTPUT
            echo "project_id=$PROJECT_ID" >> $GITHUB_OUTPUT
            
            # Build the application (can handle Next.js or static)
            echo "üî® Building application..."
            if [ -f "next.config.js" ] || [ -f "next.config.mjs" ] || [ -f "next.config.ts" ]; then
              echo "Next.js detected, building with bun build"
              bun run build
            elif [ -f "package.json" ] && grep -q '"build"' package.json; then
              echo "Build script found, running bun build"
              bun run build
            else
              echo "No specific build configuration found, attempting standard build"
              bun run build || echo "Build command not available"
            fi
            
            # Link the project to current directory
            echo "üîó Linking Vercel project..."
            vercel link --token="$VERCEL_TOKEN" --yes --project="$PROJECT_ID"
          else
            echo "‚ùå Failed to create Vercel project"
            echo "Response: $CREATE_RESPONSE"
            exit 1
          fi

      - name: "üèóÔ∏è Build application"
        run: bun run build
        env:
          NODE_ENV: production
          NEXT_TELEMETRY_DISABLED: 1
          NODE_OPTIONS: "--max-old-space-size=4096"
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.deploy-temp.outputs.production_domain }}
          # Pass all Farcaster and API configuration for build-time generation
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}

      - name: "üöÄ Deploy to Vercel (Production)"
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        id: deploy-production
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          # Farcaster Configuration
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          # App Metadata
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          # API Keys
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Optional Configuration
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}
        run: |
          echo "Deploying to Vercel Production..."
          
          # Deploy to production and capture deployment URL from stdout
          DEPLOYMENT_URL=$(vercel deploy --prod \
            --token="$VERCEL_TOKEN" \
            --yes \
            ./ 2>/dev/null)
          
          # Verify we got a valid deployment URL
          if [[ -z "$DEPLOYMENT_URL" ]]; then
            echo "‚ùå Failed to capture deployment URL"
            exit 1
          fi
          
          # The deployment URL requires authentication, so we get the actual domain via API
          PROJECT_ID="${{ steps.generate-vercel-project.outputs.project_id }}"
          
          # Get the actual production domain from Vercel API
          echo "üîç Fetching actual production domain from Vercel API..."
          DOMAINS_RESPONSE=$(curl -s -X GET \
            "https://api.vercel.com/v9/projects/${PROJECT_ID}/domains?production=true" \
            -H "Authorization: Bearer ${VERCEL_TOKEN}" \
            -H "Content-Type: application/json")
          
          # Extract the production domain name (the truncated one)
          PRODUCTION_DOMAIN=$(echo "$DOMAINS_RESPONSE" | jq -r '.domains[0].name' 2>/dev/null || echo "")
          
          if [[ -z "$PRODUCTION_DOMAIN" || "$PRODUCTION_DOMAIN" == "null" ]]; then
            echo "‚ö†Ô∏è Could not fetch production domain via API, constructing from project name..."
            PROJECT_NAME="${{ steps.generate-vercel-project.outputs.project_name }}"
            PRODUCTION_URL="https://${PROJECT_NAME}.vercel.app"
          else
            PRODUCTION_URL="https://${PRODUCTION_DOMAIN}"
            echo "‚úÖ Retrieved actual production domain: $PRODUCTION_DOMAIN"
          fi
          
          echo "üì¶ Deployment URL (requires auth): $DEPLOYMENT_URL"
          echo "‚úÖ Production domain URL: $PRODUCTION_URL"
          echo "production_url=$PRODUCTION_URL" >> $GITHUB_OUTPUT

      - name: "üè∑Ô∏è Update repository homepage URL"
        if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master'
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const actualProductionUrl = '${{ steps.deploy-production.outputs.production_url }}';
            
            console.log(`Updating repository homepage to: ${actualProductionUrl}`);
            
            try {
              await github.rest.repos.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                homepage: actualProductionUrl
              });
              console.log('Successfully updated repository homepage URL');
            } catch (error) {
              console.error('Failed to update repository homepage URL:', error);
              // Don't fail the workflow if homepage update fails
            }

      - name: "üîç Deploy to Vercel (Preview)"
        if: github.event_name == 'pull_request'
        id: deploy-preview
        env:
          VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
          # Farcaster Configuration
          FARCASTER_FID: ${{ secrets.FARCASTER_FID }}
          FARCASTER_CUSTODY_ADDRESS: ${{ secrets.FARCASTER_CUSTODY_ADDRESS }}
          FARCASTER_CUSTODY_PRIVATE_KEY: ${{ secrets.FARCASTER_CUSTODY_PRIVATE_KEY }}
          NEXT_PUBLIC_APP_DOMAIN: https://${{ steps.generate-vercel-project.outputs.project_name }}.vercel.app
          # App Metadata
          FARCASTER_APP_NAME: ${{ secrets.FARCASTER_APP_NAME }}
          FARCASTER_APP_BUTTON_TITLE: ${{ secrets.FARCASTER_APP_BUTTON_TITLE }}
          FARCASTER_APP_DESCRIPTION: ${{ secrets.FARCASTER_APP_DESCRIPTION }}
          FARCASTER_SPLASH_BACKGROUND_COLOR: ${{ secrets.FARCASTER_SPLASH_BACKGROUND_COLOR }}
          # API Keys
          TOGETHER_API_KEY: ${{ secrets.TOGETHER_API_KEY }}
          GEMINI_API_KEY: ${{ secrets.GEMINI_API_KEY }}
          # Optional Configuration
          FARCASTER_WEBHOOK_SECRET: ${{ secrets.FARCASTER_WEBHOOK_SECRET }}
          FLUX_GENERATION_DELAY: ${{ secrets.FLUX_GENERATION_DELAY }}
        run: |
          echo "Deploying to Vercel Preview..."
          
          # Deploy to preview and capture URL from stdout
          DEPLOYMENT_URL=$(vercel deploy \
            --token="$VERCEL_TOKEN" \
            --yes \
            ./ 2>/dev/null)
          
          # Verify we got a valid URL
          if [[ -z "$DEPLOYMENT_URL" ]]; then
            echo "‚ùå Failed to capture preview deployment URL"
            exit 1
          fi
          
          # Ensure the URL is properly formatted
          if [[ ! "$DEPLOYMENT_URL" =~ ^https:// ]]; then
            DEPLOYMENT_URL="https://$DEPLOYMENT_URL"
          fi
          
          echo "‚úÖ Preview deployment URL: $DEPLOYMENT_URL"
          echo "deployment_url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT

      - name: "üí¨ Comment deployment URL"
        if: github.event_name == 'pull_request' && steps.deploy-preview.outputs.deployment_url
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.PAT_TOKEN }}
          script: |
            const deploymentUrl = '${{ steps.deploy-preview.outputs.deployment_url }}';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `‚úÖ Vercel preview deployment ready!\n\nüîó ${deploymentUrl}`
            })
